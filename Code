import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.Random;

class TicTacToeGUI extends JFrame implements ActionListener {
    static char[][] board; // Mark this as static so AI can access it
    static JButton[][] buttons;
    private boolean twoPlayers;
    private Player player1, player2, currentPlayer;

    TicTacToeGUI(boolean twoPlayers) {
        this.twoPlayers = twoPlayers;
        board = new char[3][3];
        buttons = new JButton[3][3];
        initBoard();
        createGUI();
    }

    void initBoard() {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                board[i][j] = ' ';
            }
        }
    }

    void createGUI() {
        setTitle("Tic Tac Toe");
        setLayout(new GridLayout(3, 3));
        setSize(400, 400);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                buttons[i][j] = new JButton(" ");
                buttons[i][j].setFont(new Font("Arial", Font.PLAIN, 60));
                buttons[i][j].setFocusPainted(false);
                buttons[i][j].addActionListener(this);
                add(buttons[i][j]);
            }
        }

        if (twoPlayers) {
            player1 = new HumanPlayer("Player 1", 'X');
            player2 = new HumanPlayer("Player 2", 'O');
        } else {
            player1 = new HumanPlayer("Player 1", 'X');
            player2 = new AIPlayer("AI", 'O');
        }
        currentPlayer = player1;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        JButton buttonClicked = (JButton) e.getSource();
        int row = -1, col = -1;

        // Determine the button clicked
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (buttons[i][j] == buttonClicked) {
                    row = i;
                    col = j;
                    break;
                }
            }
        }

        if (currentPlayer instanceof HumanPlayer) {
            makeMove(row, col);
        }

        // Check for a win or draw
        if (checkWin()) {
            JOptionPane.showMessageDialog(this, currentPlayer.name + " Wins!");
            resetGame();
        } else if (isDraw()) {
            JOptionPane.showMessageDialog(this, "The game is a draw!");
            resetGame();
        } else {
            switchPlayer();
            if (currentPlayer instanceof AIPlayer) {
                currentPlayer.makeMove(this); // Pass the game instance
                // After AI makes a move, check for win or draw again
                if (checkWin()) {
                    JOptionPane.showMessageDialog(this, currentPlayer.name + " Wins!");
                    resetGame();
                } else if (isDraw()) {
                    JOptionPane.showMessageDialog(this, "The game is a draw!");
                    resetGame();
                } else {
                    switchPlayer();
                }
            }
        }
    }

    private void makeMove(int row, int col) {
        if (row >= 0 && col >= 0 && row < 3 && col < 3 && board[row][col] == ' ') {
            board[row][col] = currentPlayer.mark;
            buttons[row][col].setText(String.valueOf(currentPlayer.mark));
        } else {
            JOptionPane.showMessageDialog(this, "Invalid move! Try again.");
        }
    }

    private boolean checkWin() {
        return rowWin() || colWin() || diagonalWin();
    }

    private boolean rowWin() {
        for (int i = 0; i < 3; i++) {
            if (board[i][0] != ' ' && board[i][0] == board[i][1] && board[i][1] == board[i][2]) {
                return true;
            }
        }
        return false;
    }

    private boolean colWin() {
        for (int j = 0; j < 3; j++) {
            if (board[0][j] != ' ' && board[0][j] == board[1][j] && board[1][j] == board[2][j]) {
                return true;
            }
        }
        return false;
    }

    private boolean diagonalWin() {
        return (board[0][0] != ' ' && board[0][0] == board[1][1] && board[1][1] == board[2][2]) ||
               (board[0][2] != ' ' && board[0][2] == board[1][1] && board[1][1] == board[2][0]);
    }

    private boolean isDraw() {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (board[i][j] == ' ') {
                    return false;
                }
            }
        }
        return true;
    }

    private void switchPlayer() {
        currentPlayer = (currentPlayer == player1) ? player2 : player1;
    }

    private void resetGame() {
        initBoard();
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                buttons[i][j].setText(" ");
            }
        }
        currentPlayer = player1;
    }

    public static void main(String[] args) {
        String[] options = {"Two Players", "One Player (vs AI)"};
        int choice = JOptionPane.showOptionDialog(null, "Choose game mode:", "Tic Tac Toe",
                JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);

        boolean twoPlayers = choice == 0;

        TicTacToeGUI game = new TicTacToeGUI(twoPlayers);
        game.setVisible(true);
    }
}

abstract class Player {
    String name;
    char mark;

    Player(String name, char mark) {
        this.name = name;
        this.mark = mark;
    }

    abstract void makeMove(TicTacToeGUI game); // Pass TicTacToeGUI instance
}

class HumanPlayer extends Player {
    HumanPlayer(String name, char mark) {
        super(name, mark);
    }

    @Override
    void makeMove(TicTacToeGUI game) {
        // Human player moves are handled by button clicks
    }
}

class AIPlayer extends Player {
    AIPlayer(String name, char mark) {
        super(name, mark);
    }

    @Override
    void makeMove(TicTacToeGUI game) {
        Random rand = new Random();
        int row, col;
        do {
            row = rand.nextInt(3);
            col = rand.nextInt(3);
        } while (game.board[row][col] != ' '); // Use the instance's board

        game.board[row][col] = mark;
        game.buttons[row][col].setText(String.valueOf(mark));
    }
}
